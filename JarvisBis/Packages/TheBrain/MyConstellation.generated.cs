// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Constellation SDK Code Generator.
//     Generator Version: 1.8.2.17110
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Constellation;
using Constellation.Package;
using System.Threading;
using System.Threading.Tasks;

namespace TheBrain
{
    /// <summary>
    /// Represents your Constellation
    /// </summary>
	public static class MyConstellation
	{
		/// <summary>
		/// Specifies the sentinels in your Constellation
		/// </summary>
		public enum Sentinels
		{
			/// <summary>
            /// Sentinel 'LAPTOP-OB16JBC9'
            /// </summary>
			[RealName("LAPTOP-OB16JBC9")]
			LAPTOP_OB16JBC9,
		}

		/// <summary>
		/// Specifies the package's instances in your Constellation
		/// </summary>
		public enum PackageInstances
		{
			/// <summary>
            /// Package 'ApiAI' on 'LAPTOP-OB16JBC9'
            /// </summary>
			[RealName("LAPTOP-OB16JBC9/ApiAI")]
			LAPTOP_OB16JBC9_ApiAI,
		}
		
		/// <summary>
		/// Specifies the packages in your Constellation
		/// </summary>
		public enum Packages
		{
			/// <summary>
            /// Package 'ApiAI'
            /// </summary>
			[RealName("ApiAI")]
			ApiAI,
		}
    
		/// <summary>
        /// Creates the message scope to the specified sentinel.
        /// </summary>
        /// <param name="sentinel">The sentinel.</param>
        /// <returns>MessageScope</returns>
		public static MessageScope CreateScope(this Sentinels sentinel)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Sentinel, sentinel.GetRealName());
		}    
		
		/// <summary>
        /// Creates the message scope to the specified package's instance.
        /// </summary>
        /// <param name="package">The package's instance.</param>
        /// <returns>MessageScope</returns>
		public static MessageScope CreateScope(this PackageInstances package)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Package, package.GetRealName());      
		} 
		
		/// <summary>
        /// Creates the message scope to the specified package.
        /// </summary>
        /// <param name="package">The package.</param>
        /// <returns>MessageScope</returns>
		public static MessageScope CreateScope(this Packages package)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Package, package.GetRealName());        
		}
	}
	
	/// <summary>
    /// Specifies the real name of an enum value.
    /// </summary>
    /// <seealso cref="System.Attribute" />
	[System.AttributeUsage(System.AttributeTargets.Field)]
	public class RealNameAttribute : System.Attribute
	{
	    /// <summary>
        /// Gets or sets the real name.
        /// </summary>
        /// <value>
        /// The real name.
        /// </value>
		public System.String RealName { get; set; }

		/// <summary>
        /// Initializes a new instance of the <see cref="RealNameAttribute"/> class.
        /// </summary>
        /// <param name="realname">The real name.</param>
		public RealNameAttribute(System.String realname)
		{
			this.RealName = realname;
		}
		
	    /// <summary>
        /// Gets the real name of an enum value.
        /// </summary>
        /// <typeparam name="TEnum">The type of the enum.</typeparam>
        /// <param name="value">The enum value.</param>
        /// <returns>The real name.</returns>
		public static string GetRealName<TEnum>(TEnum value)
		{
			var memInfo = typeof(TEnum).GetMember(value.ToString());
			var attributes = memInfo[0].GetCustomAttributes(typeof(RealNameAttribute), false);
			return (attributes != null && attributes.Length > 0) ? ((RealNameAttribute)attributes[0]).RealName : value.ToString();
		}
	}

	/// <summary>
    /// Provides extension methods to get the real name of a Sentinel, Package or PackageInstance.
    /// </summary>
	public static class RealNameExtension
	{
		/// <summary>
        /// Gets the real name of a Sentinel.
        /// </summary>
        /// <param name="sentinel">The Sentinel.</param>
        /// <returns>The real name.</returns>
		public static string GetRealName(this MyConstellation.Sentinels sentinel)
		{
			return RealNameAttribute.GetRealName<MyConstellation.Sentinels>(sentinel);
		}

		/// <summary>
        /// Gets the real name of a Package.
        /// </summary>
        /// <param name="package">The Package.</param>
        /// <returns>The real name.</returns>
		public static string GetRealName(this MyConstellation.Packages package)
		{
			return RealNameAttribute.GetRealName<MyConstellation.Packages>(package);
		}

		/// <summary>
        /// Gets the real name of a Package's instance.
        /// </summary>
        /// <param name="package">The Package's instance.</param>
        /// <returns>The real name.</returns>
		public static string GetRealName(this MyConstellation.PackageInstances package)
		{
			return RealNameAttribute.GetRealName<MyConstellation.PackageInstances>(package);
		}
	}
}


namespace TheBrain.ApiAI.MessageCallbacks
{
	/// <summary>
	/// Type 'AIResponse'
	/// </summary>
	public class AIResponse 
	{
		/// <summary>
		/// The Id.
		/// </summary>
		public System.String Id { get; set; }

		/// <summary>
		/// The Timestamp.
		/// </summary>
		public System.DateTime Timestamp { get; set; }

		/// <summary>
		/// The Result.
		/// </summary>
		public Result Result { get; set; }

		/// <summary>
		/// The Status.
		/// </summary>
		public Status Status { get; set; }

		/// <summary>
		/// The SessionId.
		/// </summary>
		public System.String SessionId { get; set; }

		/// <summary>
		/// The IsError.
		/// </summary>
		public System.Boolean IsError { get; set; }

	}

	/// <summary>
	/// Type 'Result'
	/// </summary>
	public class Result 
	{
		/// <summary>
		/// The ActionIncomplete.
		/// </summary>
		public System.Boolean ActionIncomplete { get; set; }

		/// <summary>
		/// The Action.
		/// </summary>
		public System.String Action { get; set; }

		/// <summary>
		/// The Parameters.
		/// </summary>
		public System.Collections.Generic.Dictionary<System.String, System.Object> Parameters { get; set; }

		/// <summary>
		/// The Contexts.
		/// </summary>
		public AIOutputContext[] Contexts { get; set; }

		/// <summary>
		/// The Metadata.
		/// </summary>
		public Metadata Metadata { get; set; }

		/// <summary>
		/// The ResolvedQuery.
		/// </summary>
		public System.String ResolvedQuery { get; set; }

		/// <summary>
		/// The Fulfillment.
		/// </summary>
		public Fulfillment Fulfillment { get; set; }

		/// <summary>
		/// The Source.
		/// </summary>
		public System.String Source { get; set; }

		/// <summary>
		/// The Score.
		/// </summary>
		public System.Single Score { get; set; }

	}

	/// <summary>
	/// Type 'AIOutputContext'
	/// </summary>
	public class AIOutputContext 
	{
		/// <summary>
		/// The Name.
		/// </summary>
		public System.String Name { get; set; }

		/// <summary>
		/// The Parameters.
		/// </summary>
		public System.Collections.Generic.Dictionary<System.String, System.Object> Parameters { get; set; }

		/// <summary>
		/// The Lifespan.
		/// </summary>
		public System.Nullable<System.Int32> Lifespan { get; set; }

	}

	/// <summary>
	/// Type 'Metadata'
	/// </summary>
	public class Metadata 
	{
		/// <summary>
		/// The IntentName.
		/// </summary>
		public System.String IntentName { get; set; }

		/// <summary>
		/// The IntentId.
		/// </summary>
		public System.String IntentId { get; set; }

	}

	/// <summary>
	/// Type 'Fulfillment'
	/// </summary>
	public class Fulfillment 
	{
		/// <summary>
		/// The Speech.
		/// </summary>
		public System.String Speech { get; set; }

		/// <summary>
		/// The DisplayText.
		/// </summary>
		public System.String DisplayText { get; set; }

		/// <summary>
		/// The Source.
		/// </summary>
		public System.String Source { get; set; }

		/// <summary>
		/// The Data.
		/// </summary>
		public System.Object Data { get; set; }

		/// <summary>
		/// The Messages.
		/// </summary>
		public System.Collections.Generic.List<System.Object> Messages { get; set; }

	}

	/// <summary>
	/// Type 'Status'
	/// </summary>
	public class Status 
	{
		/// <summary>
		/// The Code.
		/// </summary>
		public System.Nullable<System.Int32> Code { get; set; }

		/// <summary>
		/// The ErrorType.
		/// </summary>
		public System.String ErrorType { get; set; }

		/// <summary>
		/// The ErrorDetails.
		/// </summary>
		public System.String ErrorDetails { get; set; }

		/// <summary>
		/// The ErrorID.
		/// </summary>
		public System.String ErrorID { get; set; }

	}

	/// <summary>
	/// Provides extension methods for the MessageScope to ApiAI
	/// </summary>
	public static class ApiAIExtensions
	{
		/// <summary>
		/// Create a ApiAIScope
		/// </summary>
		/// <param name="scope">The Constellation MessageScope</param>
		public static ApiAIScope ToApiAIScope(this MessageScope scope)
		{
			return new ApiAIScope(scope);
		}

		/// <summary>
		/// Create a ApiAIScope to all packages of the specified sentinel
		/// </summary>
		/// <param name="sentinel">The sentinel</param>
		public static ApiAIScope CreateApiAIScope(this TheBrain.MyConstellation.Sentinels sentinel)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Sentinel, sentinel.GetRealName()).ToApiAIScope();        
		}
		
		/// <summary>
		/// Create a ApiAIScope to a specific package
		/// </summary>
		/// <param name="package">The package</param>
		public static ApiAIScope CreateApiAIScope(this TheBrain.MyConstellation.PackageInstances package)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Package, package.GetRealName()).ToApiAIScope();        
		}
		
		/// <summary>
		/// Create a ApiAIScope to a specific package
		/// </summary>
		/// <param name="package">The package</param>
		public static ApiAIScope CreateApiAIScope(this TheBrain.MyConstellation.Packages package)
		{
		    return MessageScope.Create(MessageScope.ScopeType.Package, package.GetRealName()).ToApiAIScope();  
		}
	}

	/// <summary>
    /// Represent a message scope to ApiAI
    /// </summary>
	public class ApiAIScope
	{
        /// <summary>
        /// The current scope
        /// </summary>
		private MessageScope currentScope = null;

		/// <summary>
        /// Initializes a new instance of the <see cref="ApiAIScope"/> class.
        /// </summary>
        /// <param name="scope">The scope.</param>
		public ApiAIScope(MessageScope scope)
		{
			this.currentScope = scope;
		}

		/// <summary>
		/// send your request.
		/// </summary>
		/// <param name="text">your request</param>
		/// <returns>Task of AIResponse</returns>
		/// <param name="cancellationToken">The CancellationToken that this task will observe.</param>		
		/// <param name="context">The MessageContext of the received message.</param>
		public Task<AIResponse> TextRequest(System.String text, CancellationToken cancellationToken, out MessageContext context)
		{
			Task<dynamic> result = this.currentScope.GetProxy().TextRequest<AIResponse>(text, cancellationToken, out context);
            return result.ContinueWith<AIResponse>(task => (AIResponse)task.Result);
		}

		/// <summary>
		/// send your request.
		/// </summary>
		/// <param name="text">your request</param>
		/// <returns>Task of AIResponse</returns>
		/// <param name="context">The MessageContext of the received message.</param>
		public Task<AIResponse> TextRequest(System.String text, out MessageContext context)
		{
			Task<dynamic> result = this.currentScope.GetProxy().TextRequest<AIResponse>(text, out context);
            return result.ContinueWith<AIResponse>(task => (AIResponse)task.Result);
		}

		/// <summary>
		/// send your request.
		/// </summary>
		/// <param name="text">your request</param>
		/// <returns>Task of AIResponse</returns>
		/// <param name="cancellationToken">The CancellationToken that this task will observe.</param>
		public Task<AIResponse> TextRequest(System.String text, CancellationToken cancellationToken)
		{
			Task<dynamic> result = this.currentScope.GetProxy().TextRequest<AIResponse>(text, cancellationToken);
            return result.ContinueWith<AIResponse>(task => (AIResponse)task.Result);
		}

		/// <summary>
		/// send your request.
		/// </summary>
		/// <param name="text">your request</param>
		/// <returns>Task of AIResponse</returns>
		public Task<AIResponse> TextRequest(System.String text)
		{
			Task<dynamic> result = this.currentScope.GetProxy().TextRequest<AIResponse>(text);
            return result.ContinueWith<AIResponse>(task => (AIResponse)task.Result);
		}

	}
}
